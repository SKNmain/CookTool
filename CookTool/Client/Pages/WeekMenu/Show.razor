@page "/myweekmenu"
@using Microsoft.AspNetCore.Components.Authorization
@using CookTool.Client.Shared.Helpers
@using CookTool.Client.Shared.Models.SelectedItems
@using System.Text.Json
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        @if (weekMenu != null && data != null)
        {
            <h3>My week menu</h3>
            <hr />

            <button class="btn btn-warning" @onclick="() => AddRecipeModal.Open()" style="margin-right: 1rem;">Add recipe</button>

            <Modal @ref="AddRecipeModal">
                <Title>Add new recipe to your week menu!</Title>
                <Body>
                    <select id="weekDays" @onchange="@((ChangeEventArgs e) => WeekDay = e.Value.ToString())">
                        @foreach (var weekDay in WeekMenuHelper.WeekDays)
                        {
                            <option value="@weekDay">@weekDay</option>
                        }
                    </select>
                    <select id="timeDay" @onchange="@((ChangeEventArgs e) => TimeDay = e.Value.ToString())">
                        @foreach (var timeDay in WeekMenuHelper.TimeOfDays)
                        {
                            <option value="@timeDay">@timeDay</option>
                        }
                    </select>
                    <br />
                    @foreach (var recipe in recipesSelected)
                    {
                        <input type="checkbox" id="@recipe.Id" @bind="@recipe.IsSelected" /> @recipe.Title
                        <br />
                    }
                </Body>
                <Footer>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => AddNewRecipe()">Add</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => AddRecipeModal.Close()">Close</button>
                </Footer>
            </Modal>

            <button class="btn btn-danger" @onclick="() => ResetAll()">Reset week menu</button>
            <br />
            <br />

            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th></th>
                        @foreach (var weekDay in WeekMenuHelper.WeekDays)
                        {
                            <th>@weekDay</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var timeOfDay in WeekMenuHelper.TimeOfDays)
                    {
                        <tr>
                            <th>@timeOfDay</th>
                            @foreach (var weekDay in WeekMenuHelper.WeekDays)
                            {
                                <th>
                                    @foreach (var recipeId in data[weekDay][timeOfDay])
                                    {
                                        <span class="bagde badge-pill badge-warning" style="font-size: 1rem;"> <a href="recipe/@recipeId.ToString()" style="color: lightyellow">@RecipeHelper.GetRecipeTitle(recipes, recipeId)</a> </span><br />
                                    }
                                </th>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <text>No Week Menu Found.</text>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>



@code {
    [Inject]
    public AbstractHttpClientRepository Client { get; set; }
    private CookTool.Shared.Models.WeekMenu weekMenu;
    private Modal AddRecipeModal { get; set; }

    private Dictionary<string, Dictionary<string, List<int>>> data;
    private List<CookTool.Shared.Models.Recipe> recipes;
    private List<RecipeSelect> recipesSelected;

    private string WeekDay = "Monday";
    private string TimeDay = "Breakfast";

    protected override async Task OnInitializedAsync()
    {
        weekMenu = await Client.GetUserWeekMenu();
        data = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, List<int>>>>(weekMenu.WeekMenuData);

        recipes = await Client.GetRecipes();
        recipesSelected = new List<RecipeSelect>();

        recipes.ForEach(recipe =>
        {
            recipesSelected.Add(new RecipeSelect(recipe.Id, recipe.Title, false, false));
        });
    }

    private async Task ResetAll()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to reset all week menu?");
        if (confirmed)
        {
            foreach(var item in data) foreach(var item2 in item.Value) item2.Value.Clear();
            weekMenu.WeekMenuData = JsonSerializer.Serialize<Dictionary<string, Dictionary<string, List<int>>>>(data);
            await Client.UpdateWeekMenu(weekMenu);
            this.StateHasChanged();
        }
    }

    private async Task AddNewRecipe()
    {
        data[WeekDay][TimeDay].AddRange(PrepareRecipes());
        weekMenu.WeekMenuData = JsonSerializer.Serialize<Dictionary<string, Dictionary<string, List<int>>>>(data);
        await Client.UpdateWeekMenu(weekMenu);
        AddRecipeModal.Close();
        this.StateHasChanged();
    }

    private List<int> PrepareRecipes()
    {
        return recipesSelected.FindAll(recipe => recipe.IsSelected == true).Select(recipe => recipe.Id).ToList();
    }
}
