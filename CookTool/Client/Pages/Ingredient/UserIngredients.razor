@page "/mykitcheningredients"
@using Microsoft.AspNetCore.Components.Authorization
@using CookTool.Client.Shared.Helpers
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <h3>My Kitchen Ingredients</h3>
        <hr />

        <div class="form-inline">
            <button class="btn btn-outline-warning" @onclick="() => AddIngredientModal.Open()"><span class="oi oi-plus" aria-hidden="true"></span></button>
            <button class="btn btn-outline-warning" style="margin-left: 5px;" @onclick="() => AddIngredientByBarcodeModal.Open()"><BarcodeIcon /></button>
        </div>
        <Modal @ref="AddIngredientModal">
            <Title>Add new ingredient placed in your kitchen!</Title>
            <Body>
                <IngredientForm units="@units" item="@item" />
            </Body>
            <Footer>
                <button type="button" class="btn btn-warning" data-dismiss="modal" @onclick="AddIngredient"><span class="oi oi-check" aria-hidden="true"></span></button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="AddIngredientModal.Close"><span class="oi oi-x" aria-hidden="true"></span></button>
            </Footer>
        </Modal>

        <Modal @ref="AddIngredientByBarcodeModal">
            <Title>Add new ingredient placed in your kitchen by barcode!</Title>
            <Body>
                @if (!bsresult.Success)
                {
                    <div class="alert alert-danger" role="alert">
                        <p>@bsresult.Error</p>
                    </div>
                }
                <BarcodeReader GetProductByBarcode="SetItemByBarcode" />
                <IngredientBarcodeForm units="@units" item="@barcodeItem" />
            </Body>
            <Footer>
                @if(bsresult.Success){
                <button type="button" class="btn btn-warning" data-dismiss="modal" @onclick="AddIngredientByBarcode"><span class="oi oi-check" aria-hidden="true"></span></button>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="AddIngredientByBarcodeModal.Close"><span class="oi oi-x" aria-hidden="true"></span></button>
            </Footer>
        </Modal>

        <br>
        @if (userIngredients == null)
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (userIngredients.Count() == 0)
        {
            <text>No Ingredients Found.</text>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Quantity</th>
                        <th>Unit</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ui_with_unit in userIngredients)
                    {
                        foreach (var ui in ui_with_unit.Value)
                        {
                            <tr>
                                <td>@ui.Name</td>
                                <td>@ui.Quantity</td>
                                <td>@ui_with_unit.Key</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="@(() => Delete(ui))"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    public AbstractHttpClientRepository Client { get; set; }

    private Dictionary<string, List<CookTool.Shared.Models.UserIngredient>> userIngredients;
    private List<CookTool.Shared.Models.MeasurementUnit> units;

    private Modal AddIngredientModal = new Modal();
    private Modal AddIngredientByBarcodeModal = new Modal();
    private CookTool.Client.Shared.Models.BarcodeScanResult bsresult = new CookTool.Client.Shared.Models.BarcodeScanResult();

    private CookTool.Client.Shared.Models.IngredientItem item;
    private CookTool.Client.Shared.Models.IngredientItem barcodeItem;


    protected override async Task OnInitializedAsync()
    {
        units = await Client.GetMeasurementUnits();
        item = new CookTool.Client.Shared.Models.IngredientItem() { MeasurementUnitId = units.First().Id, Quantity = 1 };
        barcodeItem = new CookTool.Client.Shared.Models.IngredientItem();
        userIngredients = await Client.GetUserIngredients();
    }

    private async Task Delete(CookTool.Shared.Models.UserIngredient ui)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{ui.Name}' ingredient?");
        if (confirmed)
        {
            await Client.DeleteUserIngredient(ui.Id);
            await OnInitializedAsync();
        }
    }

    private async Task AddIngredient()
    {
        await Client.AddUserIngredient(item);
        item = new CookTool.Client.Shared.Models.IngredientItem() { MeasurementUnitId = units.First().Id, Quantity = 1 };
        AddIngredientModal.Close();
        await OnInitializedAsync();
    }

    private async Task AddIngredientByBarcode()
    {
        await Client.AddUserIngredient(barcodeItem);
        barcodeItem = new CookTool.Client.Shared.Models.IngredientItem();
        AddIngredientByBarcodeModal.Close();
        await OnInitializedAsync();
    }

    private async void SetItemByBarcode(string barcode)
    {
        await BarcodeHelper.GenereteItemByBarcode(barcode, barcodeItem, bsresult);
        this.StateHasChanged();
    }
}
