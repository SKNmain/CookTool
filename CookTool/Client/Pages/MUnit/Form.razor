@page "/measurement"
@using CookTool.Client.Shared.Models;
@using CookTool.Client.Shared.Helpers;

<h3>Convert ingredient to other units</h3>
<hr />

<div class="container-fluid">
    <div class="row p-1">
        <div class="col-lg-1 col-md-2 col-sm-3">
            <label> Name: </label>
        </div>
        <div class="col">
            @if (basicItems == null)
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <select class="form-control" id="basicItems" @onchange="@((ChangeEventArgs e) => item.Name = e.Value.ToString())">
                    @foreach (var bi in basicItems)
                    {
                        <option value="@bi.Name">@bi.Name</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row p-1">
        <div class="col-lg-1 col-md-2 col-sm-3">
            <label> Quantity: </label>
        </div>
        <div class="col">
            <input class="form-control" type="number" min="1" placeholder="1" @onchange="@((ChangeEventArgs e) => item.Quantity = Double.Parse(e.Value.ToString()))">
        </div>
    </div>
    <div class="row p-1">
        <div class="col-lg-1 col-md-2 col-sm-3">
            <label> Units: </label>
        </div>
        <div class="col">
            @if (units == null)
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <select class="form-control" id="units" @onchange="@((ChangeEventArgs e) => item.MeasurementUnitId = Int32.Parse(e.Value.ToString()))">
                    @foreach (var unit in units)
                    {
                        <option value="@unit.Id">@unit.Name</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row p-1">
        <button type="button" class="btn btn-outline-warning" @onclick="ShowResult"><span class="oi oi-check" aria-hidden="true"></span></button>
    </div>
</div>


<hr />
@if (resultItems != null)
{
    <div class="badge badge-warning text-wrap" style="width: 20rem; font-size: 1rem;">
        Results for item: @item.Name
    </div>
    <br />
    <br />
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Quantity</th>
                <th>Unit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in resultItems)
            {
                <tr>
                    <td>@result.Value.Quantity</td>
                    <td>@result.Key</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <text>No Ingredients Found.</text>
}

@code {
    [Inject]
    public AbstractHttpClientRepository Client { get; set; }
    private List<CookTool.Shared.Models.MeasurementUnit> units;
    private CookTool.Client.Shared.Models.IngredientItem item;
    private List<CookTool.Client.Shared.Models.IngredientItem> basicItems;
    private Dictionary<string, CookTool.Client.Shared.Models.IngredientItem> resultItems;

    protected override async Task OnInitializedAsync()
    {
        basicItems = IngredientsHelper.BasicItems;
        units = MeasurementHelper.PrepareUnits();
        item = new CookTool.Client.Shared.Models.IngredientItem() { Name = basicItems.First().Name, MeasurementUnitId = units.First().Id, Quantity = 1 };
    }

    private async Task ShowResult()
    {
        resultItems = PrepareResultItems();
        this.StateHasChanged();
    }

    private Dictionary<string, CookTool.Client.Shared.Models.IngredientItem> PrepareResultItems()
    {
        var resultItem = basicItems.Find(bi => bi.Name.Equals(item.Name));
        return MeasurementHelper.ConvertUnit(item, resultItem);
    }
}
