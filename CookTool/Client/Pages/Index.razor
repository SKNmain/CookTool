@page "/"
@using CookTool.Client.Shared.Helpers
@using CookTool.Client.Shared.Models

@if (recipes == null && tips == null)
{
    <div class="spinner-border-sm" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{

    <div class="container-fluid">
        <div class="row">
            <div class="form-group">
                <div class="row m-lg-2">
                    <div class="form-inline col-lg-12">
                        <input class="form-control col-lg-8" type="text" @bind-value="@Key" style="width: 900px;" placeholder="recipe names, ingredients, key words...">
                        <button class="btn btn-warning" @onclick="Search">Search</button>
                    </div>
                </div>
                <div class="row m-lg-2">
                    <div id="checkboxes">
                        @foreach (var filter in filters)
                        {
                            <label>
                                <span class="bagde badge-pill badge-warning">
                                    <input type="checkbox" @bind="@filter.IsSelected" />@filter.Name
                                </span>
                            </label>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-8">
                <h2> Recipes </h2>
                <hr />
                @if (recipes.Count > 0)
                {
                    <div class="row">
                        <div class="card-columns" style="column-count: 2">
                            @foreach (var recipe in recipes)
                            {
                                <div class="card" style="width: 90%;">
                                    <img class="card-img-top" src=@ImageHelper.RenderImageString(recipe.Image, "images/default_recipe.png") alt="No image for this recipe!" style="margin: 0 auto;" />
                                    <div class="card-body">
                                        <h4 class="card-title">@recipe.Title</h4>
                                        <a href="recipe/@recipe.Id.ToString()" class="btn btn-dark">View more</a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <p>No recipes here!</p>
                }
            </div>
            <div class="col">
                <h2> Tips </h2>
                <hr />
                @if (tips.Count > 0)
                {
                    @foreach (var tip in tips)
                    {
                        <div class="card" style="margin-bottom: 10px;">
                            <img class="card-img-top" src=@ImageHelper.RenderImageString(tip.Image, "images/default_tip.png") alt="No image for this tip!" style="margin: 0 auto;" />
                            <div class="card-body">
                                <h4 class="card-title">@tip.Title</h4>
                                <a href="tip/@tip.Id.ToString()" class="btn btn-dark">View more</a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No tips here!</p>
                }
            </div>
        </div>
    </div>

}


@code {
    [Inject]
    public AbstractHttpClientRepository Client { get; set; }

    private List<CookTool.Shared.Models.Recipe> recipes;
    private List<CookTool.Shared.Models.Tip> tips;
    private string Key;

    protected override async Task OnInitializedAsync()
    {
        if(recipes == null && tips == null)
        {
            recipes = await Client.GetRecipes();
            tips = await Client.GetTips();
        }
    }

    private List<Filter> filters = new List<Filter> {
        new Filter("Titles", false),
        new Filter("Categories", false),
        new Filter("Ingredients", false)
    };

    public async void Search()
    {
        var filters = PrepareFilters();
        recipes = await Client.GetFilteredRecipes(Key, filters);
        tips = await Client.GetFilteredTips(Key);
        this.StateHasChanged();
    }

    private string PrepareFilters()
    {
        string result = "";
        filters.ForEach(f =>
        {
            if (f.IsSelected) result += f.Name;
        });
        if (result.Equals("")) {
            filters.ForEach(f =>
            {
                result += f.Name;
            });
        }
        return result;
    }
}


