@using CookTool.Client.Shared.Helpers
@using CookTool.Client.Shared.Models.SelectedItems

<div class="form-group">
    <div class="form-row">
        <label>Upload image: </label>
        <InputFile OnChange="@((files) => ImageHelper.ReadImage(files, file, recipe))" />
        @if (file != null)
        {
            <strong>File Selected: </strong> @file.Name
        }
    </div>
</div>
<div class="form-row">
    <div class="form-group col-md-6">
        <label>Title:</label>
        <input type="text" class="form-control" @bind-value="@recipe.Title" />
    </div>
    <div class="form-group col-md-2">
        <div>
            <label>Portion Size :</label>
            <input type="number" class="form-control" min="1" @bind-value="@recipe.PortionSize" />
        </div>
    </div>
    <div class="form-group col-md-2">
        <div>
            <label>Preparation Time:</label>
            <input class="form-control" type="time" @bind="@recipe.PreparationTime" />
        </div>
    </div>
    <div class="form-group">
        <div>
            <label>Private :</label>
            @if (recipe.IsPrivate)
            {
                <input type="checkbox" class="form-control" @bind-value="@recipe.IsPrivate" checked/>
            }
            else
            {
                <input type="checkbox" class="form-control" @bind="@recipe.IsPrivate" />
            }
        </div>
    </div>
</div>
<div class="form-group">
    <div>
        <label>Categories :</label>
        <div class="form-row flex-row">
            @if (categories == null)
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div id="checkboxes">
                        @foreach (var category in categories)
                        {
                            <label>
                                <span class="bagde badge-pill badge-warning">
                                    @if (category.IsSelected)
                                    {
                                        <input type="checkbox" id="@category.Id" @bind-value="@category.IsSelected" checked/>
                                    }
                                    else
                                    {
                                        <input type="checkbox" id="@category.Id" @bind="@category.IsSelected" />
                                    }
                                    @category.Name
                                </span>
                            </label>
                        }
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<div class="form-row">
    <div class="form-group col-md-6">
        <div class="form-row">
            <div>
                <label>Preparation :</label>
                <textarea class="form-control" rows="8" cols="100" @bind="@recipe.Preparation"></textarea>
            </div>
        </div>
        <br />
        <div class="form-row">
            <div>
                <label>Notes :</label>
                <textarea class="form-control" rows="5" cols="100" @bind="@recipe.Notes"></textarea>
            </div>
        </div>
    </div>
    <div class="form-group col-md-6">
        <label>Ingredients :</label>
        <br />
        @if (ingredients == null && units == null && newIngredient == null)
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else
        {
            if (ingredients.Count > 0)
            {
                foreach (var ingredient in ingredients)
                {
                    <div class="container-fluid">
                        <div class="row p-1">
                            <div class="col-lg-3 col-md-2 col-sm-2">
                                <label> Name: </label>
                                <input type="text" class="form-control" @bind-value="@ingredient.Name" />
                            </div>
                            <div class="col-lg-3 col-md-2 col-sm-2">
                                <label> Quantity: </label>
                                <input type="number" class="form-control" @bind-value="@ingredient.Quantity" />
                            </div>
                            <div class="col-lg-3 col-md-2 col-sm-2">
                                <label> Unit: </label>
                                @if (units == null)
                                {
                                    <div class="spinner-border" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                }
                                else
                                {
                                    <select class="form-control" id="units" @bind="@ingredient.MeasurementUnitId">
                                        @foreach (var unit in units)
                                        {
                                            <option value="@unit.Id">@unit.Name</option>
                                        }
                                    </select>
                                }
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1">
                                <label></label>
                                <button class="btn btn-danger" @onclick="() => DeleteIngredient(ingredient)"><span class="oi oi-trash" aria-hidden="true"></span></button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No ingredients to show!</p>
            }
            <br />
            <button class="btn btn-outline-warning" @onclick="() => AddIngredientModal.Open()"><span class="oi oi-plus" aria-hidden="true"></span></button>

            <Modal @ref="AddIngredientModal">
                <Title>Add new ingredient!</Title>
                <Body>
                    <CookTool.Client.Pages.Ingredient.IngredientForm units="units" item="item"/>
                </Body>
                <Footer>
                    <button type="button" class="btn btn-warning" data-dismiss="modal" @onclick="() => AddIngredient()"><span class="oi oi-check" aria-hidden="true"></span></button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => AddIngredientModal.Close()"><span class="oi oi-x" aria-hidden="true"></span></button>
                </Footer>
            </Modal>

        }

    </div>
</div>
<div class="form-row">
    <button type="submit" class="btn btn-outline-warning" @onclick="OnValidSubmit">
        <span class="oi oi-check" aria-hidden="true"></span>
    </button>
</div>

@code {
    [Parameter] public CookTool.Shared.Models.Recipe recipe { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<CategorySelect> categories { get; set; }
    [Parameter] public List<CookTool.Shared.Models.Ingredient> ingredients { get; set; }
    [Parameter] public List<CookTool.Shared.Models.MeasurementUnit> units { get; set; }
    private IFileListEntry file;

    private CookTool.Client.Shared.Models.IngredientItem item = new CookTool.Client.Shared.Models.IngredientItem() { MeasurementUnitId = 1, Quantity = 1};
    private CookTool.Shared.Models.Ingredient newIngredient = new CookTool.Shared.Models.Ingredient();
    private Modal AddIngredientModal { get; set; }

    private void DeleteIngredient(CookTool.Shared.Models.Ingredient ing)
    {
        ingredients.Remove(ing);
        this.StateHasChanged();
    }

    private async Task AddIngredient()
    {
        PrepareNewIngredient();
        ingredients.Add(newIngredient);
        newIngredient = new CookTool.Shared.Models.Ingredient();
        this.AddIngredientModal.Close();
        this.StateHasChanged();
    }

    private void PrepareNewIngredient()
    {
        newIngredient.Name = item.Name;
        newIngredient.Quantity = item.Quantity;
        newIngredient.MeasurementUnitId = item.MeasurementUnitId;
        item = new CookTool.Client.Shared.Models.IngredientItem() { MeasurementUnitId = units.First().Id, Quantity = 1 };
    }
}
