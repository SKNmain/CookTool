@page "/myrecipes"
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime js

<AuthorizeView>
    <Authorized>
        <h3> My Recipes </h3>

        <div class="form-group">
            <a class="btn btn-success" href="recipe/create"><i class="oi oi-plus"></i> Add New Recipe</a>
        </div>
        <br>

        @if (recipes == null)
        {
            <text>Loading...</text>
        }
        else if (recipes.Length == 0)
        {
            <text>No Records Found.</text>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Public</th>
                        <th>Show</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (CookTool.Shared.Models.Recipe recipe in recipes)
                    {
                        <tr>
                            <td> @recipe.Title </td>
                            <td> @IsPublic(recipe.IsPrivate); </td>
                            <td>
                                <a class="btn btn-success" href="recipe/@recipe.Id.ToString()">Show</a>
                            </td>
                            <td>
                                <a class="btn btn-warning" href="recipe/edit/@recipe.Id.ToString()">Edit</a>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="@(() => Delete(recipe.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    public IHttpClientRepository Client { get; set; }

    CookTool.Shared.Models.Recipe[] recipes { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //recipes = await Client.GetUserRecipes();
    }
    async Task Delete(int recipeId)
    {
        var recipe = recipes.First(x => x.Id == recipeId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {recipe.Title} ({recipe.Id}) Record?"))
        {
            //await Client.DeleteUSerRecipe();
            await OnInitializedAsync();
        }
    }

    String IsPublic(bool isPrivate)
    {
        return isPrivate ? "No" : "Yes";
    }
}

